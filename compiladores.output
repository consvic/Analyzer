Terminals unused in grammar

   COMA
   LE
   GE
   NE
   LTEQ
   INT_NUM
   FLOAT_NUM


State 61 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: var_dec stmt_seq

    2 var_dec: var_dec single_dec
    3        | %empty

    4 single_dec: type ID SEMI

    5 type: INTEGER
    6     | FLOAT

    7 stmt_seq: stmt_seq stmt m
    8         | %empty

    9 stmt: IF exp THEN m stmt
   10     | IF exp THEN m stmt n m stmt
   11     | WHILE m exp DO m stmt
   12     | variable ASSIGN exp SEMI
   13     | READ LPAREN variable RPAREN SEMI
   14     | WRITE LPAREN exp RPAREN SEMI
   15     | block

   16 m: %empty

   17 n: ELSE

   18 block: LBRACE stmt_seq RBRACE

   19 exp: simple_exp LT simple_exp
   20    | simple_exp EQ simple_exp
   21    | simple_exp GT simple_exp
   22    | simple_exp

   23 simple_exp: simple_exp PLUS term
   24           | simple_exp MINUS term
   25           | term

   26 term: term TIMES factor
   27     | term DIV factor
   28     | factor

   29 factor: LPAREN exp RPAREN
   30       | INTEGER
   31       | FLOAT
   32       | variable

   33 variable: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 4 33
SEMI (259) 4 12 13 14
INTEGER (260) 5 30
FLOAT (261) 6 31
COMA (262)
IF (263) 9 10
THEN (264) 9 10
ELSE (265) 17
WHILE (266) 11
DO (267) 11
ASSIGN (268) 12
WRITE (269) 14
READ (270) 13
LPAREN (271) 13 14 29
RPAREN (272) 13 14 29
LBRACE (273) 18
RBRACE (274) 18
LT (275) 19
GT (276) 21
LE (277)
GE (278)
EQ (279) 20
NE (280)
LTEQ (281)
PLUS (282) 23
MINUS (283) 24
TIMES (284) 26
DIV (285) 27
INT_NUM (286)
FLOAT_NUM (287)


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1, on right: 0
var_dec (35)
    on left: 2 3, on right: 1 2
single_dec (36)
    on left: 4, on right: 2
type (37)
    on left: 5 6, on right: 4
stmt_seq (38)
    on left: 7 8, on right: 1 7 18
stmt (39)
    on left: 9 10 11 12 13 14 15, on right: 7 9 10 11
m (40)
    on left: 16, on right: 7 9 10 11
n (41)
    on left: 17, on right: 10
block (42)
    on left: 18, on right: 15
exp (43)
    on left: 19 20 21 22, on right: 9 10 11 12 14 29
simple_exp (44)
    on left: 23 24 25, on right: 19 20 21 22 23 24
term (45)
    on left: 26 27 28, on right: 23 24 25 26 27
factor (46)
    on left: 29 30 31 32, on right: 26 27 28
variable (47)
    on left: 33, on right: 12 13 32


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (var_dec)

    program  go to state 1
    var_dec  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: var_dec . stmt_seq
    2 var_dec: var_dec . single_dec

    INTEGER  shift, and go to state 4
    FLOAT    shift, and go to state 5

    $default  reduce using rule 8 (stmt_seq)

    single_dec  go to state 6
    type        go to state 7
    stmt_seq    go to state 8


State 3

    0 $accept: program $end .

    $default  accept


State 4

    5 type: INTEGER .

    $default  reduce using rule 5 (type)


State 5

    6 type: FLOAT .

    $default  reduce using rule 6 (type)


State 6

    2 var_dec: var_dec single_dec .

    $default  reduce using rule 2 (var_dec)


State 7

    4 single_dec: type . ID SEMI

    ID  shift, and go to state 9


State 8

    1 program: var_dec stmt_seq .
    7 stmt_seq: stmt_seq . stmt m

    ID      shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    WRITE   shift, and go to state 13
    READ    shift, and go to state 14
    LBRACE  shift, and go to state 15

    $default  reduce using rule 1 (program)

    stmt      go to state 16
    block     go to state 17
    variable  go to state 18


State 9

    4 single_dec: type ID . SEMI

    SEMI  shift, and go to state 19


State 10

   33 variable: ID .

    $default  reduce using rule 33 (variable)


State 11

    9 stmt: IF . exp THEN m stmt
   10     | IF . exp THEN m stmt n m stmt

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    exp         go to state 23
    simple_exp  go to state 24
    term        go to state 25
    factor      go to state 26
    variable    go to state 27


State 12

   11 stmt: WHILE . m exp DO m stmt

    $default  reduce using rule 16 (m)

    m  go to state 28


State 13

   14 stmt: WRITE . LPAREN exp RPAREN SEMI

    LPAREN  shift, and go to state 29


State 14

   13 stmt: READ . LPAREN variable RPAREN SEMI

    LPAREN  shift, and go to state 30


State 15

   18 block: LBRACE . stmt_seq RBRACE

    $default  reduce using rule 8 (stmt_seq)

    stmt_seq  go to state 31


State 16

    7 stmt_seq: stmt_seq stmt . m

    $default  reduce using rule 16 (m)

    m  go to state 32


State 17

   15 stmt: block .

    $default  reduce using rule 15 (stmt)


State 18

   12 stmt: variable . ASSIGN exp SEMI

    ASSIGN  shift, and go to state 33


State 19

    4 single_dec: type ID SEMI .

    $default  reduce using rule 4 (single_dec)


State 20

   30 factor: INTEGER .

    $default  reduce using rule 30 (factor)


State 21

   31 factor: FLOAT .

    $default  reduce using rule 31 (factor)


State 22

   29 factor: LPAREN . exp RPAREN

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    exp         go to state 34
    simple_exp  go to state 24
    term        go to state 25
    factor      go to state 26
    variable    go to state 27


State 23

    9 stmt: IF exp . THEN m stmt
   10     | IF exp . THEN m stmt n m stmt

    THEN  shift, and go to state 35


State 24

   19 exp: simple_exp . LT simple_exp
   20    | simple_exp . EQ simple_exp
   21    | simple_exp . GT simple_exp
   22    | simple_exp .
   23 simple_exp: simple_exp . PLUS term
   24           | simple_exp . MINUS term

    LT     shift, and go to state 36
    GT     shift, and go to state 37
    EQ     shift, and go to state 38
    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40

    $default  reduce using rule 22 (exp)


State 25

   25 simple_exp: term .
   26 term: term . TIMES factor
   27     | term . DIV factor

    TIMES  shift, and go to state 41
    DIV    shift, and go to state 42

    $default  reduce using rule 25 (simple_exp)


State 26

   28 term: factor .

    $default  reduce using rule 28 (term)


State 27

   32 factor: variable .

    $default  reduce using rule 32 (factor)


State 28

   11 stmt: WHILE m . exp DO m stmt

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    exp         go to state 43
    simple_exp  go to state 24
    term        go to state 25
    factor      go to state 26
    variable    go to state 27


State 29

   14 stmt: WRITE LPAREN . exp RPAREN SEMI

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    exp         go to state 44
    simple_exp  go to state 24
    term        go to state 25
    factor      go to state 26
    variable    go to state 27


State 30

   13 stmt: READ LPAREN . variable RPAREN SEMI

    ID  shift, and go to state 10

    variable  go to state 45


State 31

    7 stmt_seq: stmt_seq . stmt m
   18 block: LBRACE stmt_seq . RBRACE

    ID      shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    WRITE   shift, and go to state 13
    READ    shift, and go to state 14
    LBRACE  shift, and go to state 15
    RBRACE  shift, and go to state 46

    stmt      go to state 16
    block     go to state 17
    variable  go to state 18


State 32

    7 stmt_seq: stmt_seq stmt m .

    $default  reduce using rule 7 (stmt_seq)


State 33

   12 stmt: variable ASSIGN . exp SEMI

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    exp         go to state 47
    simple_exp  go to state 24
    term        go to state 25
    factor      go to state 26
    variable    go to state 27


State 34

   29 factor: LPAREN exp . RPAREN

    RPAREN  shift, and go to state 48


State 35

    9 stmt: IF exp THEN . m stmt
   10     | IF exp THEN . m stmt n m stmt

    $default  reduce using rule 16 (m)

    m  go to state 49


State 36

   19 exp: simple_exp LT . simple_exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    simple_exp  go to state 50
    term        go to state 25
    factor      go to state 26
    variable    go to state 27


State 37

   21 exp: simple_exp GT . simple_exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    simple_exp  go to state 51
    term        go to state 25
    factor      go to state 26
    variable    go to state 27


State 38

   20 exp: simple_exp EQ . simple_exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    simple_exp  go to state 52
    term        go to state 25
    factor      go to state 26
    variable    go to state 27


State 39

   23 simple_exp: simple_exp PLUS . term

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    term      go to state 53
    factor    go to state 26
    variable  go to state 27


State 40

   24 simple_exp: simple_exp MINUS . term

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    term      go to state 54
    factor    go to state 26
    variable  go to state 27


State 41

   26 term: term TIMES . factor

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    factor    go to state 55
    variable  go to state 27


State 42

   27 term: term DIV . factor

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 20
    FLOAT    shift, and go to state 21
    LPAREN   shift, and go to state 22

    factor    go to state 56
    variable  go to state 27


State 43

   11 stmt: WHILE m exp . DO m stmt

    DO  shift, and go to state 57


State 44

   14 stmt: WRITE LPAREN exp . RPAREN SEMI

    RPAREN  shift, and go to state 58


State 45

   13 stmt: READ LPAREN variable . RPAREN SEMI

    RPAREN  shift, and go to state 59


State 46

   18 block: LBRACE stmt_seq RBRACE .

    $default  reduce using rule 18 (block)


State 47

   12 stmt: variable ASSIGN exp . SEMI

    SEMI  shift, and go to state 60


State 48

   29 factor: LPAREN exp RPAREN .

    $default  reduce using rule 29 (factor)


State 49

    9 stmt: IF exp THEN m . stmt
   10     | IF exp THEN m . stmt n m stmt

    ID      shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    WRITE   shift, and go to state 13
    READ    shift, and go to state 14
    LBRACE  shift, and go to state 15

    stmt      go to state 61
    block     go to state 17
    variable  go to state 18


State 50

   19 exp: simple_exp LT simple_exp .
   23 simple_exp: simple_exp . PLUS term
   24           | simple_exp . MINUS term

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40

    $default  reduce using rule 19 (exp)


State 51

   21 exp: simple_exp GT simple_exp .
   23 simple_exp: simple_exp . PLUS term
   24           | simple_exp . MINUS term

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40

    $default  reduce using rule 21 (exp)


State 52

   20 exp: simple_exp EQ simple_exp .
   23 simple_exp: simple_exp . PLUS term
   24           | simple_exp . MINUS term

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40

    $default  reduce using rule 20 (exp)


State 53

   23 simple_exp: simple_exp PLUS term .
   26 term: term . TIMES factor
   27     | term . DIV factor

    TIMES  shift, and go to state 41
    DIV    shift, and go to state 42

    $default  reduce using rule 23 (simple_exp)


State 54

   24 simple_exp: simple_exp MINUS term .
   26 term: term . TIMES factor
   27     | term . DIV factor

    TIMES  shift, and go to state 41
    DIV    shift, and go to state 42

    $default  reduce using rule 24 (simple_exp)


State 55

   26 term: term TIMES factor .

    $default  reduce using rule 26 (term)


State 56

   27 term: term DIV factor .

    $default  reduce using rule 27 (term)


State 57

   11 stmt: WHILE m exp DO . m stmt

    $default  reduce using rule 16 (m)

    m  go to state 62


State 58

   14 stmt: WRITE LPAREN exp RPAREN . SEMI

    SEMI  shift, and go to state 63


State 59

   13 stmt: READ LPAREN variable RPAREN . SEMI

    SEMI  shift, and go to state 64


State 60

   12 stmt: variable ASSIGN exp SEMI .

    $default  reduce using rule 12 (stmt)


State 61

    9 stmt: IF exp THEN m stmt .
   10     | IF exp THEN m stmt . n m stmt

    ELSE  shift, and go to state 65

    ELSE      [reduce using rule 9 (stmt)]
    $default  reduce using rule 9 (stmt)

    n  go to state 66


State 62

   11 stmt: WHILE m exp DO m . stmt

    ID      shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    WRITE   shift, and go to state 13
    READ    shift, and go to state 14
    LBRACE  shift, and go to state 15

    stmt      go to state 67
    block     go to state 17
    variable  go to state 18


State 63

   14 stmt: WRITE LPAREN exp RPAREN SEMI .

    $default  reduce using rule 14 (stmt)


State 64

   13 stmt: READ LPAREN variable RPAREN SEMI .

    $default  reduce using rule 13 (stmt)


State 65

   17 n: ELSE .

    $default  reduce using rule 17 (n)


State 66

   10 stmt: IF exp THEN m stmt n . m stmt

    $default  reduce using rule 16 (m)

    m  go to state 68


State 67

   11 stmt: WHILE m exp DO m stmt .

    $default  reduce using rule 11 (stmt)


State 68

   10 stmt: IF exp THEN m stmt n m . stmt

    ID      shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    WRITE   shift, and go to state 13
    READ    shift, and go to state 14
    LBRACE  shift, and go to state 15

    stmt      go to state 69
    block     go to state 17
    variable  go to state 18


State 69

   10 stmt: IF exp THEN m stmt n m stmt .

    $default  reduce using rule 10 (stmt)
